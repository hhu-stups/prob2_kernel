plugins {
	id("de.undercouch.download").version("5.6.0")
	
	id("jacoco")
	id("java-library")
}

// When making a release, please check that parserVersion matches what the specified version of probcli expects, to avoid unpredictable/inconsistent behavior!
def parserVersion = "2.13.3"
def probcliVersion = "1.13.1-nightly"
def cliDownloadURL
if (probcliVersion.endsWith("-nightly")) {
	if (!isSnapshot) {
		throw new GradleException("A release version of the ProB Java API cannot use a nightly version of probcli! Please change the variable probcliVersion (currently ${probcliVersion}) to a release version!")
	}
	cliDownloadURL = "https://stups.hhu-hosting.de/downloads/prob/cli/nightly"
} else {
	cliDownloadURL = "https://stups.hhu-hosting.de/downloads/prob/cli/releases/${probcliVersion}"
}

dependencies {
	// ProB parser dependencies (Eclipse Public License 1.0)
	api group: "de.hhu.stups", name: "answerparser", version: parserVersion
	api group: "de.hhu.stups", name: "bparser", version: parserVersion
	api group: "de.hhu.stups", name: "ltlparser", version: parserVersion
	api group: "de.hhu.stups", name: "parserbase", version: parserVersion
	api group: "de.hhu.stups", name: "prologlib", version: parserVersion
	api group: "de.hhu.stups", name: "unicode", version: parserVersion
	api group: "de.hhu.stups", name: "theorymapping", version: parserVersion
	api group: "de.hhu.stups", name: "value-translator", version: "0.1.4-SNAPSHOT"

	// Other STUPS dependencies
	implementation group: "de.hhu.stups", name: "alloy2b", version: "1.4" // Eclipse Public License 1.0
	api group: "de.hhu.stups", name: "ltl-dsl", version: "0.2.1" // Eclipse Public License 1.0
	api group: "de.hhu.stups", name: "rodin-eventb-ast", version: "3.8.0" // Eclipse Public License 1.0
	implementation group: "de.hhu.stups", name: "tla2bAST", version: "1.3.0" // Eclipse Public License 1.0
	// TODO: switch to release version as soon as possible
	api group: "de.hhu.stups", name: "tlc4b", version: "1.1.1-SNAPSHOT" // MIT License

	// Logging
	api group: "org.slf4j", name: "slf4j-api", version: "2.0.13" // MIT License

	// Misc dependencies
	implementation group: "com.github.krukow", name: "clj-ds", version: "0.0.4" // Eclipse Public License 1.0
	implementation group: "com.google.guava", name: "guava", version: "33.2.1-jre" // Apache License 2.0
	api group: "com.google.inject", name: "guice", version: "6.0.0" // Apache License 2.0

	api(platform(group: "com.fasterxml.jackson", name: "jackson-bom", version: "2.17.2"))
	api group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
	api group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names'
	api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
	api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8'
	implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'

	// Test dependencies
	testImplementation group: "ch.qos.logback", name: "logback-classic", version: "1.3.14" // Eclipse Public License 1.0
	testImplementation(platform('org.junit:junit-bom:5.10.3'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testRuntimeOnly group: "org.junit.platform", name: "junit-platform-launcher"
}

final generatedResourcesDir = layout.buildDirectory.dir("generated-src/main/resources").get().asFile

sourceSets {
	main {
		resources {
			srcDir(generatedResourcesDir)
		}
	}
}

final platforms = [
	"macos",
	"linux64",
	"windows64",
]

task downloadBinaries(type: Download) {
	src(platforms.collect {platform -> "${cliDownloadURL}/probcli_${platform}.zip"})
	dest(new File(generatedResourcesDir, "de/prob/cli/binaries"))
	onlyIfModified(true)
}

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, rootProject.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

processResources {
	filesMatching("de/prob/build.properties") {
		expand(version: project.version, git: readCurrentGitCommit())
	}
}

if (!rootProject.hasProperty("probHome")) {
	// Automatically download probcli/cspmf, unless a custom PROB_HOME is set
	processResources.dependsOn(downloadBinaries)
}

sourcesJar {
	// The downloaded binaries shouldn't go into the sources jar.
	exclude("de/prob/cli/binaries")
}

test {
	useJUnitPlatform()
	systemProperty("logback.configurationFile", "de/prob/logging/production.xml")
	testLogging {
		exceptionFormat = 'full'
	}
}

jacoco {
	toolVersion = "0.8.12"
}
jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

publishing.publications.mavenJava.pom.description = "Core of the ProB Java API"
