plugins {
	id "de.undercouch.download" version "4.0.4"
}

apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

project.group = 'de.hhu.stups'
sourceCompatibility = 1.8
targetCompatibility = 1.8

final SOURCE_ENCODING = "UTF-8"


// IMPORTANT !!!
project.version = '3.11.0'
// project.version = '4.0.0-SNAPSHOT'

// Remember to release the cli
ext {
	cli_version = '1.10.0-beta1'
}
// IMPORTANT !!!

final isSnapshot = project.version.endsWith("-SNAPSHOT")

def parserVersion
def cliDownloadURL
if (isSnapshot) {
	parserVersion = '2.9.26-SNAPSHOT'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/nightly"
} else {
	parserVersion = '2.9.25'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/releases/${cli_version}"
}


repositories {
	mavenCentral()
	if (isSnapshot) {
		maven {
			name "sonatype snapshots"
			url "https://oss.sonatype.org/content/repositories/snapshots"
		}
	}
}


configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


// in order to compile the mix of java and groovy in this project we compile all files using the groovy compiler
sourceSets.main.groovy.srcDirs = ['src/main/groovy', 'src/main/java'] // i.e. include the 'java' dir as groovy source
sourceSets.main.java.srcDirs = [] // i.e. there's no stand-alone java source


dependencies {
	// ProB parser dependencies (Eclipse Public License 1.0)
	api group: "de.hhu.stups", name: "answerparser", version: parserVersion
	api group: "de.hhu.stups", name: "bparser", version: parserVersion
	api group: "de.hhu.stups", name: "ltlparser", version: parserVersion
	api group: "de.hhu.stups", name: "parserbase", version: parserVersion
	api group: "de.hhu.stups", name: "prologlib", version: parserVersion
	api group: "de.hhu.stups", name: "unicode", version: parserVersion
	api group: "de.hhu.stups", name: "theorymapping", version: parserVersion
	api group: "de.hhu.stups", name: "value-translator", version: "0.0.2"

	// Groovy (Apache License 2.0)
	final groovyVersion = "3.0.3"
	api group: "org.codehaus.groovy", name: "groovy", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-jsr223", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-nio", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-xml", version: groovyVersion

	// Logging
	// Normally, libraries should only depend on SLF4J and let the application decide what logging implementation to use.
	// However, ProB 2 is both a library and an application. When executed as an application, it needs to provide its own logging implementation. When used as a library, it should ideally not force a particular logging implementation on the application that uses ProB 2.
	// TODO Can/should this be fixed? Should ProB 2's CLI be pulled out into a separate subproject, so that library and application dependencies can be separated?
	api group: "ch.qos.logback", name: "logback-core", version: "1.2.3" // Eclipse Public License 1.0
	api group: "ch.qos.logback", name: "logback-classic", version: "1.2.3" // Eclipse Public License 1.0
	api group: "org.slf4j", name: "slf4j-api", version: "1.7.30" // MIT License

	// Misc dependencies
	// The following dependency needs to be api because the constructor of de.prob.model.representation.AbstractElement (and some subclasses) takes a com.github.krukow.clj_lang.PersistentHashMap.
	// TODO Should we assume that external users do not call these constructors, and change this to an implementation dependency?
	api group: "com.github.krukow", name: "clj-ds", version: "0.0.4" // Eclipse Public License 1.0
	implementation group: "com.google.code.gson", name: "gson", version: "2.8.6" // Apache License 2.0
	implementation group: "com.google.guava", name: "guava", version: "28.2-jre" // Apache License 2.0
	api group: "com.google.inject", name: "guice", version: "4.2.2" // Apache License 2.0
	implementation group: "commons-cli", name: "commons-cli", version: "1.4" // Apache License 2.0
	implementation group: "de.hhu.stups", name: "alloy2b", version: "1.2"
	api group: "de.hhu.stups", name: "ltl-dsl", version: "0.1.3" // Eclipse Public License 1.0
	api group: "de.hhu.stups", name: "rodin-eventb-ast", version: "3.2.0" // Eclipse Public License 1.0
	implementation group: "de.hhu.stups", name: "tla2bAST", version: "1.1.3" // Eclipse Public License 1.0

	// Annotations
	api group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2" // Apache License 2.0

	// Test dependencies
	testImplementation group: "junit", name: "junit", version: "4.13" // Eclipse Public License 1.0
	testImplementation group: "org.spockframework", name: "spock-core", version: "2.0-M2-groovy-3.0" // Apache License 2.0
	// Byte Buddy and Objenesis are needed by Spock to mock classes
	testRuntimeOnly group: "net.bytebuddy", name: "byte-buddy", version: "1.10.7" // Apache License 2.0
	testRuntimeOnly group: "org.objenesis", name: "objenesis", version: "3.1" // Apache License 2.0
}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(GroovyCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(Javadoc) {
	options.encoding = SOURCE_ENCODING
}

// The Groovydoc encoding can't be set via the task, it depends on the file.encoding system property of the Gradle JVM.
// FIXME This needs to be set in the gradle.properties, but the file is encrypted.

final CLI_DOWNLOAD_DIR = file("src/main/resources/de/prob/cli/binaries")

task downloadCLIs(type: Download) {
	final files = []
	[
		'leopard64',
		'linux64',
		'win64',
	].each {platform ->
		files << "probcli_${platform}.zip"
	}
	files << "windowslib64.zip"

	src(files.collect {"${cliDownloadURL}/${it}"})
	dest(CLI_DOWNLOAD_DIR)
	onlyIfModified(true)
}

task downloadCSPMFrontend {
	final cspmfDownloadURL = "https://www3.hhu.de/stups/downloads/cspmf"
	final files = [
		'darwin-64': 'leopard64',
		'linux-64': 'linux64',
		'windows': 'windows',
	].collectEntries {cspmfPlatform, probPlatform ->
		def libName
		if (cspmfPlatform == "windows") {
			libName = "cspmf.exe"
		} else {
			libName = "cspmf"
		}
		// Note: toString is used here to eagerly evaluate the GString (which is not hashed properly otherwise)
		[("${cspmfDownloadURL}/${cspmfPlatform}/${libName}".toString()): new File(CLI_DOWNLOAD_DIR, "${probPlatform}-${libName}")]
	}

	doLast {
		CLI_DOWNLOAD_DIR.mkdirs()
		files.each {url, target ->
			download {
				src(url)
				dest(target)
				onlyIfModified(true)
			}
			target.executable = true
		}
	}
}

task cleanDownloads(type: Delete) {
	delete(CLI_DOWNLOAD_DIR)
}
clean.dependsOn(cleanDownloads)

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

processResources {
	filesMatching("de/prob/build.properties") {
		expand(version: project.version, git: readCurrentGitCommit())
	}
}

if (!project.hasProperty("probHome")) {
	// Automatically download probcli/cspmf, unless a custom PROB_HOME is set
	processResources.dependsOn(downloadCLIs, downloadCSPMFrontend)
}

test {
	exclude('de/prob/cli/integration')
	testLogging {
		exceptionFormat = 'full'
	}
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
}

groovydoc {
	docTitle="ProB Core "+project.version
}

wrapper {
	gradleVersion = "6.3"
	distributionType = Wrapper.DistributionType.ALL
}

task allTests(dependsOn: ['test', 'groovyIntegrationTests', 'cliIntegrationTests'])

task groovyIntegrationTests(type: JavaExec, dependsOn: ['classes']) {
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}
project.jacoco.applyTo(groovyIntegrationTests)


task cliIntegrationTests(type: Test, dependsOn: ['test']) {
	include('de/prob/cli/integration/**/*')
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoCliIntegrationTests.exec")
	}
}

jacoco {
	toolVersion = "0.8.5"
}
task codeCoverageReport(type: JacocoReport, dependsOn: ['allTests']) {
	sourceDirectories.from([])
	classDirectories.from('build/classes/groovy/main')
	//onlyIf = {true}
	reports {
		xml.enabled false
		csv.enabled false
		html.destination new File("${buildDir}/jacocoHtml")
	}
	executionData(test, groovyIntegrationTests, cliIntegrationTests)
}

check.dependsOn codeCoverageReport

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}

// Workaround for https://github.com/gradle/gradle/issues/5630
// See https://stackoverflow.com/a/52797107
javadoc {
	options.addStringOption("sourcepath", "")
}

java {
	withSourcesJar()
	withJavadocJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			
			pom {
				name = "prob2-kernel"
				description = 'The ProB 2.0 Kernel'
				url = 'http://www.prob2.de'
				
				licenses {
					license {
						name = 'Eclipse Public License, Version 1.0'
						url = 'http://www.eclipse.org/org/documents/epl-v10.html'
					}
				}
				
				scm {
					connection = 'scm:git:git://github.com/bendisposto/prob2.git'
					developerConnection = 'scm:git:git@github.com:bendisposto/prob2.git'
					url = 'https://github.com/bendisposto/prob2'
				}
				
				developers {
					developer {
						id = 'bendisposto'
						name = 'Jens Bendisposto'
						email = 'jens@bendisposto.de'
					}
				}
			}
		}
	}
	
	repositories {
		maven {
			final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
			url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
			if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
				credentials {
					username project.ossrhUsername
					password project.ossrhPassword
				}
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}
