plugins {
	id "de.undercouch.download" version "4.1.1"
	id "com.google.osdetector" version "1.6.2"
}

apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'jacoco'


allprojects {
	apply(plugin: "java")
	apply(plugin: "maven-publish")
	apply(plugin: "signing")
	
	project.group = 'de.hhu.stups'
	// IMPORTANT: Before releasing ProB 2, remember to set cli_version below to a release version!
	project.version = '3.12.0'
	//project.version = '4.0.0-SNAPSHOT'
	project.ext.isSnapshot = project.version.endsWith("-SNAPSHOT")
	project.ext.SOURCE_ENCODING = "UTF-8"
	
	repositories {
		mavenCentral()
		if (isSnapshot) {
			maven {
				name "sonatype snapshots"
				url "https://oss.sonatype.org/content/repositories/snapshots"
			}
		}
	}
	
	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
	
	if (project.hasProperty("probHome")) {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
	
	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		withSourcesJar()
		withJavadocJar()
	}
	
	tasks.withType(JavaCompile) {
		options.encoding = SOURCE_ENCODING
	}
	
	tasks.withType(Javadoc) {
		options.encoding = SOURCE_ENCODING
	}
	
	// Workaround for https://github.com/gradle/gradle/issues/5630
	// See https://stackoverflow.com/a/52797107
	javadoc {
		options.addStringOption("sourcepath", "")
	}
	
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				
				pom {
					name = project.name
					url = 'http://www.prob2.de'
					
					licenses {
						license {
							name = 'Eclipse Public License, Version 1.0'
							url = 'http://www.eclipse.org/org/documents/epl-v10.html'
						}
					}
					
					scm {
						connection = 'scm:git:https://github.com/hhu-stups/prob2_kernel.git'
						developerConnection = 'scm:git:git@gitlab.cs.uni-duesseldorf.de:stups/prob/prob2_kernel.git'
						url = 'https://github.com/hhu-stups/prob2_kernel'
					}
					
					developers {
						developer {
							id = 'bendisposto'
							name = 'Jens Bendisposto'
							email = 'jens@bendisposto.de'
						}
					}
				}
			}
		}
		
		repositories {
			maven {
				final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
				final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
				url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
				if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
					credentials {
						username project.ossrhUsername
						password project.ossrhPassword
					}
				}
			}
		}
	}
	
	signing {
		sign publishing.publications.mavenJava
	}
}

// IMPORTANT !!!
// Remember to release the cli
ext {
	cli_version = '1.10.0-final'
}
// IMPORTANT !!!

def parserVersion
def cliDownloadURL
if (isSnapshot) {
	parserVersion = '2.9.28-SNAPSHOT'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/nightly"
} else {
	parserVersion = '2.9.27'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/releases/${cli_version}"
}


// in order to compile the mix of java and groovy in this project we compile all files using the groovy compiler
sourceSets.main.groovy.srcDirs = ['src/main/groovy', 'src/main/java'] // i.e. include the 'java' dir as groovy source
sourceSets.main.java.srcDirs = [] // i.e. there's no stand-alone java source


dependencies {
	// ProB parser dependencies (Eclipse Public License 1.0)
	api group: "de.hhu.stups", name: "answerparser", version: parserVersion
	api group: "de.hhu.stups", name: "bparser", version: parserVersion
	api group: "de.hhu.stups", name: "ltlparser", version: parserVersion
	api group: "de.hhu.stups", name: "parserbase", version: parserVersion
	api group: "de.hhu.stups", name: "prologlib", version: parserVersion
	api group: "de.hhu.stups", name: "unicode", version: parserVersion
	api group: "de.hhu.stups", name: "theorymapping", version: parserVersion
	api group: "de.hhu.stups", name: "value-translator", version: "0.1.2"

	// Groovy (Apache License 2.0)
	final groovyVersion = "3.0.3"
	api group: "org.codehaus.groovy", name: "groovy", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-jsr223", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-nio", version: groovyVersion
	api group: "org.codehaus.groovy", name: "groovy-xml", version: groovyVersion

	// Logging
	api group: "org.slf4j", name: "slf4j-api", version: "1.7.30" // MIT License

	// Misc dependencies
	implementation group: "com.fatboyindustrial.gson-javatime-serialisers", name: "gson-javatime-serialisers", version: "1.1.1" // MIT License
	// The following dependency needs to be api because the constructor of de.prob.model.representation.AbstractElement (and some subclasses) takes a com.github.krukow.clj_lang.PersistentHashMap.
	// TODO Should we assume that external users do not call these constructors, and change this to an implementation dependency?
	api group: "com.github.krukow", name: "clj-ds", version: "0.0.4" // Eclipse Public License 1.0
	implementation group: "com.google.guava", name: "guava", version: "28.2-jre" // Apache License 2.0
	implementation group: "com.google.code.gson", name: "gson", version: "2.8.6"
	api group: "com.google.inject", name: "guice", version: "4.2.2" // Apache License 2.0
	implementation group: "de.hhu.stups", name: "alloy2b", version: "1.2"
	api group: "de.hhu.stups", name: "ltl-dsl", version: "0.1.3" // Eclipse Public License 1.0
	api group: "de.hhu.stups", name: "rodin-eventb-ast", version: "3.2.0" // Eclipse Public License 1.0
	implementation group: "de.hhu.stups", name: "tla2bAST", version: "1.1.3" // Eclipse Public License 1.0

	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'


	// Test dependencies
	testImplementation group: "ch.qos.logback", name: "logback-classic", version: "1.2.3" // Eclipse Public License 1.0
	testImplementation group: "junit", name: "junit", version: "4.13" // Eclipse Public License 1.0
	testImplementation group: "org.spockframework", name: "spock-core", version: "2.0-M2-groovy-3.0" // Apache License 2.0
	// Byte Buddy and Objenesis are needed by Spock to mock classes
	testRuntimeOnly group: "net.bytebuddy", name: "byte-buddy", version: "1.10.7" // Apache License 2.0
	testRuntimeOnly group: "org.objenesis", name: "objenesis", version: "3.1" // Apache License 2.0
}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
}

tasks.withType(GroovyCompile) {
	options.encoding = SOURCE_ENCODING
}

// The Groovydoc encoding can't be set via the task, it depends on the file.encoding system property of the Gradle JVM.
// FIXME This needs to be set in the gradle.properties, but the file is encrypted.

final generatedResourcesDir = new File(project.buildDir, "generated-src/main/resources")

sourceSets {
	main {
		resources {
			srcDir(generatedResourcesDir)
		}
	}
}

final platforms = [
	"leopard64",
	"linux64",
	"win64",
]

task downloadBinaries(type: Download) {
	src(platforms.collect {platform -> "${cliDownloadURL}/probcli_${platform}.zip"})
	dest(new File(generatedResourcesDir, "de/prob/cli/binaries"))
	onlyIfModified(true)
}

task cleanOldCliDownloads(type: Delete) {
	// Delete old CLI download directory (no longer used)
	delete(file("src/main/resources/de/prob/cli/binaries"))
}

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

processResources {
	filesMatching("de/prob/build.properties") {
		expand(version: project.version, git: readCurrentGitCommit())
	}
}

if (!project.hasProperty("probHome")) {
	// Automatically download probcli/cspmf, unless a custom PROB_HOME is set
	processResources.dependsOn(cleanOldCliDownloads, downloadBinaries)
}

test {
	useJUnitPlatform()
	systemProperty("logback.configurationFile", "de/prob/logging/production.xml")
	testLogging {
		exceptionFormat = 'full'
	}
}

groovydoc {
	docTitle="ProB Core "+project.version
}

wrapper {
	gradleVersion = "6.3"
	distributionType = Wrapper.DistributionType.ALL
}

task groovyIntegrationTests(type: JavaExec) {
	main = "de.prob2.commandline.CommandLineMain"
	classpath = project(":de.prob2.commandline").sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}
check.dependsOn(groovyIntegrationTests)
project.jacoco.applyTo(groovyIntegrationTests)

jacoco {
	toolVersion = "0.8.5"
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination new File("${buildDir}/jacocoHtml")
	}
	executionData(test, groovyIntegrationTests)
}

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}

publishing.publications.mavenJava.pom.description = "The ProB 2.0 Kernel library"
